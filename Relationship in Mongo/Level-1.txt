Q1: You have a MongoDB database with two collections: "employees" and "departments." Write a MongoDB query that performs a simple $lookup to join the "employees" collection with the "departments" collection based on the "department_id" field.
Ans:-  db.employees.aggregate([
  {
    $lookup: {
      from: "departments",
      localField: "department_id",
      foreignField: "_id",
      as: "department"
    }
  }
])


Q2: In the same MongoDB database with "employees" and "departments" collections, create a query that performs a $lookup to join the collections and then uses $project to display only the "name" and "location" fields from the "departments" collection for each employee.
Ans:- db.employees.aggregate([
    {$lookup:{
        from : "departments",
        localField: "department_id",
        foreignField: "_id",
        as : "department"
    }},
    {$project: {name : 1 ,
     departmentName: { $arrayElemAt: ["$department.name", 0] },
      departmentLocation: { $arrayElemAt: ["$department.location", 0] }
    }}
])


Q3: Imagine you need to find employees working in the "HR" department. Write a MongoDB query that joins the "employees" and "departments" collections using $lookup and then filters the results to show only those in the "HR" department.
Ans:- db.employees.aggregate([
    {$lookup :{
        from :"departments",
        localField:"department_id",
        foreignField :"_id",
        as :"department"
    }},
    {$match:{
        "department.name" : "HR"
    }}
])


Q4: You want to calculate the average age of employees in each department. Design a MongoDB query that performs a $lookup to join the "employees" and "departments" collections and then groups the employees by department to compute the average age.
Ans:- db.employees.aggregate([
    {$lookup :{
        from : "departments",
        localField : "department_id",
        foreignField : "_id",
        as : "department"
    }},
    {$group :{
        _id : "$department.name",
        average : {$avg : "$age"}
    }}
])


Q5: In your MongoDB database, you need to find employees in the "Engineering" department and display only their names and department locations. Construct a query that first joins the collections, then filters for the "Engineering" department, and finally projects the necessary fields.
Ans:- db.employees.aggregate([
  {
    $lookup: {
      from: "departments",
      localField: "department_id",
      foreignField: "_id",
      as: "department"
    }
  },
  {
    $unwind: "$department"
  },
  {
    $match: {
      "department.name": "Engineering"
    }
  },
  {
    $project: {
      _id: 0,
      name: 1,
      "department.location": 1
    }
  }
])

Q6: You want to find out how many employees are under 30 and how many are 30 or older in each department. Create a MongoDB query that first joins the "employees" and "departments" collections, then groups employees by department and age range, and calculates the count in each group.
Ans:- db.employees.aggregate([
  {
    $lookup: {
      from: "departments",
      localField: "department_id",
      foreignField: "_id",
      as: "department"
    }
  },
  {
    $unwind: "$department"
  },
  {
    $group: {
      _id: {
        department_id: "$department._id",
        department_name: "$department.name",
        age_range: {
          $cond: { if: { $lt: ["$age", 30] }, then: "Under 30", else: "30 and Older" }
        }
      },
      count: { $sum: 1 }
    }
  }
])


Q7: In your MongoDB database, you want to find the average age of employees in each department. Write a query that performs a $lookup to join the collections, uses $unwind to flatten the "department" array, and then groups employees by department to calculate the average age.
Ans:- db.employees.aggregate([
  {
    $lookup: {
      from: "departments",
      localField: "department_id",
      foreignField: "_id",
      as: "department"
    }
  },
  {
    $unwind: "$department"
  },
  {
    $group: {
      _id: {
        department_id: "$department._id",
        department_name: "$department.name"
      },
      average_age: { $avg: "$age" }
    }
  }
])


Q8: You need to find employees in the "Finance" department who are older than 30. Formulate a MongoDB query that performs a $lookup to join the collections, projects specific fields, and then filters for employees meeting the specified criteria.
Ans:- db.employees.aggregate([
  {
    $lookup: {
      from: "departments",
      localField: "department_id",
      foreignField: "_id",
      as: "department"
    }
  },
  {
    $unwind: "$department"
  },
  {
    $match: {
      "department.name": "Finance",
      age: { $gt: 30 }
    }
  },
  {
    $project: {
      _id: 0,
      name: 1,
      age: 1,
      department_name: "$department.name"
    }
  }
])


Q9: In your MongoDB database, you want to find the two youngest employees in each department. Create a MongoDB query that performs a $lookup to join the "employees" and "departments" collections, sorts employees in each department by age in ascending order, and returns only the two youngest employees from each department.
Ans:- db.employees.aggregate([
  {
    $lookup: {
      from: "departments",
      localField: "department_id",
      foreignField: "_id",
      as: "department"
    }
  },
  {
    $unwind: "$department"
  },
  {
    $sort: {
      "department.name": 1,
      age: 1
    }
  },
  {
    $group: {
      _id: {
        department_id: "$department._id",
        department_name: "$department.name"
      },
      employees: { $push: "$$ROOT" }
    }
  },
  {
    $project: {
      _id: 0,
      department_id: "$_id.department_id",
      department_name: "$_id.department_name",
      youngest_employees: { $slice: ["$employees", 2] }
    }
  }
])


Q10: Suppose you have an array of department IDs and you want to find all employees who belong to any of these departments. Write a MongoDB query that performs a $lookup to join the "employees" and "departments" collections, and then matches employees based on a provided array of department IDs.
Ans:-
const departmentIds = [10, 25, 42];
 db.employees.aggregate([
  {
    $lookup: {
      from: "departments",
      localField: "department_id",
      foreignField: "_id",
      as: "department"
    }
  },
  {
    $unwind: "$department"
  },
  {
    $match: {
      "department._id": { $in: departmentIds }
    }
  },
  {
    $project: {
      _id: 0,
      name: 1,
      department_name: "$department.name"
    }
  }
])